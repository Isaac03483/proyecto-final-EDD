
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.compiler.parser;

import com.mio.compiler.lexer.EstructuraLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EstructuraParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EstructuraParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EstructuraParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EstructuraParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EstructuraParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\015\005\000\002\016\006\000\002\013\005\000\002" +
    "\014\006\000\002\011\005\000\002\012\006\000\002\007" +
    "\005\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\006\005\001\002\000\004\002\060\001" +
    "\002\000\004\004\056\001\002\000\006\002\000\006\005" +
    "\001\002\000\002\001\002\000\006\002\ufffe\006\ufffe\001" +
    "\002\000\004\006\012\001\002\000\012\005\032\010\030" +
    "\011\031\012\052\001\002\000\004\011\044\001\002\000" +
    "\004\011\036\001\002\000\004\006\026\001\002\000\004" +
    "\011\020\001\002\000\006\002\ufffd\006\ufffd\001\002\000" +
    "\004\006\021\001\002\000\004\012\023\001\002\000\004" +
    "\006\ufffa\001\002\000\004\011\024\001\002\000\004\007" +
    "\025\001\002\000\004\006\ufff5\001\002\000\010\005\032" +
    "\010\030\011\031\001\002\000\004\006\ufffc\001\002\000" +
    "\004\007\035\001\002\000\004\007\034\001\002\000\004" +
    "\007\033\001\002\000\004\011\ufff2\001\002\000\004\011" +
    "\ufff6\001\002\000\004\011\ufff4\001\002\000\004\006\037" +
    "\001\002\000\004\012\041\001\002\000\004\006\ufff9\001" +
    "\002\000\004\010\042\001\002\000\004\007\043\001\002" +
    "\000\004\006\ufff3\001\002\000\004\006\045\001\002\000" +
    "\004\012\047\001\002\000\004\006\ufffb\001\002\000\004" +
    "\005\050\001\002\000\004\007\051\001\002\000\004\006" +
    "\ufff1\001\002\000\004\004\053\001\002\000\004\007\054" +
    "\001\002\000\006\002\ufff7\006\ufff7\001\002\000\006\002" +
    "\uffff\006\uffff\001\002\000\004\007\057\001\002\000\002" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\012\002\003\003\005\004\007\015\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\054" +
    "\015\006\001\001\000\004\005\010\001\001\000\002\001" +
    "\001\000\014\006\014\007\012\011\013\013\015\016\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\026\007\012\011\013\013\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EstructuraParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EstructuraParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EstructuraParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public EstructuraParser(EstructuraLexer lexer){

        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EstructuraParser$actions {
  private final EstructuraParser parser;

  /** Constructor */
  CUP$EstructuraParser$actions(EstructuraParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action_part00000000(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EstructuraParser$result;

      /* select the action based on the action number */
      switch (CUP$EstructuraParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = start_val;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EstructuraParser$parser.done_parsing();
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= structs 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // structs ::= structs struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // structs ::= struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct ::= lStruct structProd rStruct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("struct",2, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // structProd ::= structProd attribute attribute 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structProd",3, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // attribute ::= lTable NAME rTable 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("attribute",4, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // attribute ::= lName NAME rName 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("attribute",4, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // attribute ::= lKey NAME rKey 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("attribute",4, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lStruct ::= LBRACE ESTRUCTURA RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lStruct",11, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rStruct ::= LBRACE DIAGONAL ESTRUCTURA RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rStruct",12, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lName ::= LBRACE NAME RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lName",9, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rName ::= LBRACE DIAGONAL NAME RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rName",10, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lKey ::= LBRACE CLAVE RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lKey",7, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rKey ::= LBRACE DIAGONAL CLAVE RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rKey",8, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lTable ::= LBRACE TABLA RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lTable",5, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rTable ::= LBRACE DIAGONAL TABLA RBRACE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rTable",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EstructuraParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
              return CUP$EstructuraParser$do_action_part00000000(
                               CUP$EstructuraParser$act_num,
                               CUP$EstructuraParser$parser,
                               CUP$EstructuraParser$stack,
                               CUP$EstructuraParser$top);
    }
}

}
