
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.compiler.parser;

import com.mio.compiler.Token;
import com.mio.compiler.lexer.EstructuraLexer;
import com.mio.models.abbTree.Tree;
import com.mio.models.list.List;
import com.mio.models.table.Property;
import com.mio.models.table.PropertyType;
import com.mio.models.table.Table;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EstructuraParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EstructuraParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EstructuraParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EstructuraParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EstructuraParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\023\000\002\004\013" +
    "\000\002\022\006\000\002\022\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\012\005\000\002\013\006\000\002\014" +
    "\005\000\002\015\006\000\002\023\005\000\002\011\006" +
    "\000\002\007\005\000\002\010\006\000\002\005\005\000" +
    "\002\006\006\000\002\016\005\000\002\017\006\000\002" +
    "\020\005\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\007\006\001\002\000\004\002\125\001" +
    "\002\000\004\007\013\001\002\000\004\005\007\001\002" +
    "\000\004\010\010\001\002\000\004\007\ufff2\001\002\000" +
    "\004\007\117\001\002\000\004\007\020\001\002\000\004" +
    "\004\015\001\002\000\004\007\ufffe\001\002\000\004\010" +
    "\016\001\002\000\004\007\ufff4\001\002\000\004\012\023" +
    "\001\002\000\004\006\021\001\002\000\004\010\022\001" +
    "\002\000\004\012\uffec\001\002\000\004\007\024\001\002" +
    "\000\004\013\114\001\002\000\004\007\027\001\002\000" +
    "\004\007\061\001\002\000\006\012\066\022\106\001\002" +
    "\000\014\015\041\016\034\017\040\020\037\021\035\001" +
    "\002\000\004\007\032\001\002\000\004\012\066\001\002" +
    "\000\014\015\041\016\034\017\040\020\037\021\035\001" +
    "\002\000\004\007\ufff8\001\002\000\004\007\ufff5\001\002" +
    "\000\004\007\043\001\002\000\004\007\ufff6\001\002\000" +
    "\004\007\ufff7\001\002\000\004\007\ufff9\001\002\000\004" +
    "\007\032\001\002\000\004\013\044\001\002\000\004\012" +
    "\045\001\002\000\004\010\046\001\002\000\004\007\uffef" +
    "\001\002\000\004\012\050\001\002\000\004\007\043\001" +
    "\002\000\004\007\053\001\002\000\004\007\032\001\002" +
    "\000\004\013\054\001\002\000\004\022\055\001\002\000" +
    "\004\010\056\001\002\000\004\007\uffe7\001\002\000\004" +
    "\007\061\001\002\000\004\012\071\001\002\000\006\011" +
    "\065\012\066\001\002\000\014\015\041\016\034\017\040" +
    "\020\037\021\035\001\002\000\004\007\043\001\002\000" +
    "\004\007\ufffb\001\002\000\004\010\070\001\002\000\004" +
    "\010\067\001\002\000\016\012\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\001\002\000\004\012\uffee\001\002" +
    "\000\004\007\072\001\002\000\004\013\101\001\002\000" +
    "\004\007\074\001\002\000\004\013\076\001\002\000\004" +
    "\007\ufffd\001\002\000\004\004\077\001\002\000\004\010" +
    "\100\001\002\000\004\007\ufff3\001\002\000\004\011\102" +
    "\001\002\000\004\010\103\001\002\000\004\007\uffed\001" +
    "\002\000\004\007\043\001\002\000\004\007\ufffa\001\002" +
    "\000\004\010\107\001\002\000\004\007\uffe8\001\002\000" +
    "\004\012\111\001\002\000\004\007\072\001\002\000\004" +
    "\007\074\001\002\000\004\007\ufffc\001\002\000\004\006" +
    "\115\001\002\000\004\010\116\001\002\000\004\007\uffeb" +
    "\001\002\000\006\004\015\013\122\001\002\000\004\007" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\005\123" +
    "\001\002\000\004\010\124\001\002\000\004\002\ufff1\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\002\003\014\004\001\001\000\002\001" +
    "\001\000\010\003\010\004\013\012\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\117\012\011\015\120\001\001\000\004\005\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\002\001\001\000\010\020\030\022\025\023\027\001\001" +
    "\000\006\007\107\023\061\001\001\000\002\001\001\000" +
    "\004\024\103\001\001\000\004\023\032\001\001\000\002" +
    "\001\001\000\004\024\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\050\001" +
    "\001\000\004\021\051\001\001\000\006\022\056\023\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\057\023\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\062\001" +
    "\001\000\004\011\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\072\001\001\000\002\001\001\000\004" +
    "\013\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\111\001\001\000" +
    "\004\013\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EstructuraParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EstructuraParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EstructuraParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    List<String> errorMessages;
    public EstructuraParser(EstructuraLexer lexer, List<String> errorMessages){

        super(lexer);
        this.errorMessages = errorMessages;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EstructuraParser$actions {
  private final EstructuraParser parser;

  /** Constructor */
  CUP$EstructuraParser$actions(EstructuraParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action_part00000000(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EstructuraParser$result;

      /* select the action based on the action number */
      switch (CUP$EstructuraParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = start_val;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EstructuraParser$parser.done_parsing();
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= lStructs structs rStructs 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // structs ::= structs struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // structs ::= struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct ::= lStruct lTable NAME rTable lRelation lName type rName lName NAME rName rRelation properties lKey NAME rKey rStruct 
            {
              Object RESULT =null;
		int tableNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-14)).left;
		int tableNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-14)).right;
		Token tableName = (Token)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-14)).value;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-11)).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-11)).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-10)).right;
		PropertyType type = (PropertyType)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-10)).value;
		int parentNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-8)).left;
		int parentNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-8)).right;
		String parentName = (String)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).right;
		List<Property> list = (List<Property>)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).value;
		int keyNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).left;
		int keyNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).right;
		Token keyName = (Token)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).value;
		
        Property foreignProperty = new Property(propertyName, type);
        Table parent = Tree.getInstance().getByName(parentName);
        if ( parent == null ) {
            errorMessages.add("No se encontró la entidad: "+parentName);

        } else {

            Property parentProperty = parent.properties.find(foreignProperty);
            if ( parentProperty == null ) {
                errorMessages.add("No se encontró la propiedad en la entidad padre: "+propertyName);
            } else {

                if(foreignProperty.propertyType != parentProperty.propertyType) {
                    errorMessages.add("El tipo de la propiedad: "+parentProperty.propertyName+" del padre no coincide con la actual");
                } else {

                    list.add(foreignProperty);
                    if ( list.hasDuplicates() ) {
                        errorMessages.add("Propiedades duplicadas.");
                    } else {

                        Property keyProperty = new Property(keyName.getValue(), null);

                        Property keyInList = list.find(keyProperty);

                        if( keyInList == null ) {
                            errorMessages.add("No se encontró la llave: "+keyName.getValue()+" dentro de las propiedades.");

                        } else {
                            Table newTable = new Table(tableName.getValue(), list, keyName.getValue(), propertyName, parentName);
                            Tree.getInstance().add(newTable);
                            errorMessages.add("Tabla: "+tableName.getValue()+" creada con éxito.");
                        }

                    }
                }
            }
        }
    
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("struct",2, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-16)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= lStruct lTable NAME rTable properties lKey NAME rKey rStruct 
            {
              Object RESULT =null;
		int tableNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-6)).left;
		int tableNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-6)).right;
		Token tableName = (Token)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-6)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).right;
		List<Property> list = (List<Property>)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-4)).value;
		int keyNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).left;
		int keyNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).right;
		Token keyName = (Token)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).value;
		
        if ( list.hasDuplicates() ) {
            errorMessages.add("Propiedades duplicadas.");
        } else {

            Property keyProperty = new Property(keyName.getValue(), null);

            Property keyInList = list.find(keyProperty);

            if( keyInList == null ) {
                errorMessages.add("No se encontró la llave: "+keyName.getValue()+" dentro de las propiedades.");

            } else {
                Table newTable = new Table(tableName.getValue(), list, keyName.getValue());
                Tree.getInstance().add(newTable);
                errorMessages.add("Tabla: "+tableName.getValue()+" creada con éxito.");
            }

        }
    
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("struct",2, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-8)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // properties ::= properties lName type rName 
            {
              List<Property> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)).right;
		List<Property> list = (List<Property>)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)).value;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).value;
		int propertyTypeleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int propertyTyperight = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		PropertyType propertyType = (PropertyType)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = list; RESULT.add(new Property(propertyName,  propertyType));
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("properties",16, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // properties ::= lName type rName 
            {
              List<Property> RESULT =null;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)).value;
		int propertyTypeleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int propertyTyperight = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		PropertyType propertyType = (PropertyType)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = new List<>(); RESULT.add(new Property(propertyName, propertyType));
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("properties",16, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              PropertyType RESULT =null;
		RESULT = PropertyType.INT;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= DOUBLE 
            {
              PropertyType RESULT =null;
		RESULT = PropertyType.DOUBLE;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              PropertyType RESULT =null;
		RESULT = PropertyType.BOOLEAN;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CHAR 
            {
              PropertyType RESULT =null;
		RESULT = PropertyType.CHAR;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= STRING 
            {
              PropertyType RESULT =null;
		RESULT = PropertyType.STRING;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",18, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lStruct ::= LESS ESTRUCTURA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lStruct",8, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rStruct ::= LESS DIAGONAL ESTRUCTURA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rStruct",9, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lStructs ::= LESS ESTRUCTURAS GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lStructs",10, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rStructs ::= LESS DIAGONAL ESTRUCTURAS GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rStructs",11, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lName ::= LESS NAME GREATER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = name.getValue();
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lName",17, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rName ::= LESS DIAGONAL NAME GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rName",7, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lKey ::= LESS CLAVE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lKey",5, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rKey ::= LESS DIAGONAL CLAVE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rKey",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lTable ::= LESS TABLA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lTable",3, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rTable ::= LESS DIAGONAL TABLA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rTable",4, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lParent ::= LESS PADRE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lParent",12, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rParent ::= LESS DIAGONAL PADRE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rParent",13, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lRelation ::= LESS RELACION GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lRelation",14, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rRelation ::= LESS DIAGONAL RELACION GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rRelation",15, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EstructuraParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
              return CUP$EstructuraParser$do_action_part00000000(
                               CUP$EstructuraParser$act_num,
                               CUP$EstructuraParser$parser,
                               CUP$EstructuraParser$stack,
                               CUP$EstructuraParser$top);
    }
}

}
