
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.compiler.parser;

import com.mio.compiler.lexer.EstructuraLexer;
import com.mio.models.table.PropertyType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EstructuraParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EstructuraParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EstructuraParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EstructuraParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EstructuraParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\016\000\002\004\013" +
    "\000\002\005\006\000\002\005\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\015\005\000\002\016\006" +
    "\000\002\017\005\000\002\020\006\000\002\013\005\000" +
    "\002\014\006\000\002\011\005\000\002\012\006\000\002" +
    "\006\005\000\002\007\006\000\002\021\005\000\002\022" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\007\006\001\002\000\004\002\120\001" +
    "\002\000\004\007\013\001\002\000\004\005\007\001\002" +
    "\000\004\010\010\001\002\000\004\007\uffee\001\002\000" +
    "\004\007\112\001\002\000\004\007\020\001\002\000\004" +
    "\004\015\001\002\000\004\007\ufffe\001\002\000\004\010" +
    "\016\001\002\000\004\007\ufff0\001\002\000\004\012\023" +
    "\001\002\000\004\006\021\001\002\000\004\010\022\001" +
    "\002\000\004\012\uffe8\001\002\000\004\007\024\001\002" +
    "\000\004\013\107\001\002\000\004\007\027\001\002\000" +
    "\004\007\053\001\002\000\004\012\050\001\002\000\024" +
    "\015\037\016\040\017\031\020\032\021\035\022\041\023" +
    "\033\024\042\025\034\001\002\000\004\007\ufff7\001\002" +
    "\000\004\007\ufff6\001\002\000\004\007\ufff3\001\002\000" +
    "\004\007\ufff1\001\002\000\004\007\ufff5\001\002\000\004" +
    "\007\044\001\002\000\004\007\ufff9\001\002\000\004\007" +
    "\ufff8\001\002\000\004\007\ufff4\001\002\000\004\007\ufff2" +
    "\001\002\000\004\007\ufffa\001\002\000\004\013\045\001" +
    "\002\000\004\012\046\001\002\000\004\010\047\001\002" +
    "\000\004\007\uffeb\001\002\000\004\010\051\001\002\000" +
    "\024\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\001\002\000\004\012\061\001" +
    "\002\000\006\011\057\012\050\001\002\000\024\015\037" +
    "\016\040\017\031\020\032\021\035\022\041\023\033\024" +
    "\042\025\034\001\002\000\004\007\044\001\002\000\004" +
    "\007\ufffb\001\002\000\004\010\060\001\002\000\004\012" +
    "\uffea\001\002\000\004\007\062\001\002\000\004\013\104" +
    "\001\002\000\004\007\065\001\002\000\004\012\074\001" +
    "\002\000\006\013\067\014\070\001\002\000\004\007\ufffc" +
    "\001\002\000\004\004\072\001\002\000\004\010\071\001" +
    "\002\000\004\012\uffe6\001\002\000\004\010\073\001\002" +
    "\000\004\007\uffef\001\002\000\004\007\075\001\002\000" +
    "\004\013\101\001\002\000\004\007\077\001\002\000\004" +
    "\013\067\001\002\000\004\007\ufffd\001\002\000\004\014" +
    "\102\001\002\000\004\010\103\001\002\000\004\007\uffe5" +
    "\001\002\000\004\011\105\001\002\000\004\010\106\001" +
    "\002\000\004\007\uffe9\001\002\000\004\006\110\001\002" +
    "\000\004\010\111\001\002\000\004\007\uffe7\001\002\000" +
    "\006\004\015\013\115\001\002\000\004\007\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\005\116\001\002\000" +
    "\004\010\117\001\002\000\004\002\uffed\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\006\002\003\017\004\001\001\000\002\001" +
    "\001\000\010\003\010\004\013\015\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\112\015\011\020\113\001\001\000\004\006\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\024\001\001\000" +
    "\002\001\001\000\006\005\025\013\027\001\001\000\006" +
    "\011\051\013\053\001\001\000\002\001\001\000\004\010" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\054\001\001\000\004\014\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\062\001\001\000\002\001\001\000\006" +
    "\016\065\021\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\075\001\001\000\002\001\001\000\004\016\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EstructuraParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EstructuraParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EstructuraParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public EstructuraParser(EstructuraLexer lexer){

        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EstructuraParser$actions {
  private final EstructuraParser parser;

  /** Constructor */
  CUP$EstructuraParser$actions(EstructuraParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action_part00000000(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EstructuraParser$result;

      /* select the action based on the action number */
      switch (CUP$EstructuraParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)).value;
		RESULT = start_val;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EstructuraParser$parser.done_parsing();
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= lStructs structs rStructs 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // structs ::= structs struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-1)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // structs ::= struct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("structs",1, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // struct ::= lStruct lTable NAME rTable properties lKey NAME rKey lParent NAME rParent rStruct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("struct",2, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-11)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= lStruct lTable NAME rTable properties lKey NAME rKey rStruct 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("struct",2, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-8)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // properties ::= properties lName type rName 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("properties",3, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // properties ::= lName type rName 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("properties",3, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BYTE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= SHORT 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LONG 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= STRING 
            {
              Object RESULT =null;
		RESULT = PropertyType.STRING;
              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lStruct ::= LESS ESTRUCTURA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lStruct",11, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rStruct ::= LESS DIAGONAL ESTRUCTURA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rStruct",12, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lStructs ::= LESS ESTRUCTURAS GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lStructs",13, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rStructs ::= LESS DIAGONAL ESTRUCTURAS GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rStructs",14, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lName ::= LESS NAME GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lName",9, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rName ::= LESS DIAGONAL NAME GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rName",10, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lKey ::= LESS CLAVE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lKey",7, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rKey ::= LESS DIAGONAL CLAVE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rKey",8, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lTable ::= LESS TABLA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lTable",4, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rTable ::= LESS DIAGONAL TABLA GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rTable",5, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lParent ::= LESS PADRE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("lParent",15, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-2)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rParent ::= LESS DIAGONAL PADRE GREATER 
            {
              Object RESULT =null;

              CUP$EstructuraParser$result = parser.getSymbolFactory().newSymbol("rParent",16, ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.elementAt(CUP$EstructuraParser$top-3)), ((java_cup.runtime.Symbol)CUP$EstructuraParser$stack.peek()), RESULT);
            }
          return CUP$EstructuraParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EstructuraParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EstructuraParser$do_action(
    int                        CUP$EstructuraParser$act_num,
    java_cup.runtime.lr_parser CUP$EstructuraParser$parser,
    java.util.Stack            CUP$EstructuraParser$stack,
    int                        CUP$EstructuraParser$top)
    throws java.lang.Exception
    {
              return CUP$EstructuraParser$do_action_part00000000(
                               CUP$EstructuraParser$act_num,
                               CUP$EstructuraParser$parser,
                               CUP$EstructuraParser$stack,
                               CUP$EstructuraParser$top);
    }
}

}
