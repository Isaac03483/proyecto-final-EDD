
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.compiler.parser;

import com.mio.compiler.Token;
import com.mio.compiler.lexer.CargaLexer;
import com.mio.models.abbTree.Tree;
import com.mio.models.list.List;
import com.mio.models.table.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EntradaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EntradaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EntradaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EntradaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EntradaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\005\000\002\004" +
    "\006\000\002\004\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\004\000\002\007\003\000\002\006\005\000\002" +
    "\003\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\004\005\001\002\000\004\002\035\001" +
    "\002\000\004\013\033\001\002\000\004\004\005\001\002" +
    "\000\004\004\027\001\002\000\014\007\017\010\011\011" +
    "\015\012\016\013\014\001\002\000\004\004\ufffc\001\002" +
    "\000\006\004\ufff9\013\025\001\002\000\004\004\021\001" +
    "\002\000\006\004\ufff7\013\ufff7\001\002\000\004\004\ufffb" +
    "\001\002\000\004\004\ufffa\001\002\000\004\004\ufffd\001" +
    "\002\000\004\004\ufffe\001\002\000\004\006\022\001\002" +
    "\000\004\013\023\001\002\000\004\005\024\001\002\000" +
    "\006\002\ufff5\004\ufff5\001\002\000\006\004\ufff8\013\ufff8" +
    "\001\002\000\004\002\000\001\002\000\006\006\022\013" +
    "\033\001\002\000\014\007\017\010\011\011\015\012\016" +
    "\013\014\001\002\000\004\004\021\001\002\000\004\004" +
    "\uffff\001\002\000\004\005\034\001\002\000\016\004\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\002\003\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\006\006\007\001\001" +
    "\000\006\003\025\006\027\001\001\000\006\005\012\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\030\007\011\001\001\000\004\003\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EntradaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EntradaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EntradaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    List<String> errorList;
    public EntradaParser(CargaLexer lexer, List<String> errorList){

        super(lexer);
        this.errorList = errorList;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EntradaParser$actions {
  private final EntradaParser parser;

  /** Constructor */
  CUP$EntradaParser$actions(EntradaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EntradaParser$do_action_part00000000(
    int                        CUP$EntradaParser$act_num,
    java_cup.runtime.lr_parser CUP$EntradaParser$parser,
    java.util.Stack            CUP$EntradaParser$stack,
    int                        CUP$EntradaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EntradaParser$result;

      /* select the action based on the action number */
      switch (CUP$EntradaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		RESULT = start_val;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EntradaParser$parser.done_parsing();
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= lName attributes rName 
            {
              Object RESULT =null;
		int tableNameleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).left;
		int tableNameright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).right;
		String tableName = (String)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		List<Attribute> list = (List<Attribute>)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		
        System.out.println("Agregando a... "+tableName);
        Table table = Tree.getInstance().getByName(tableName);

        if(table == null){
            errorList.add("No se encontr√≥ la tabla con nombre: "+tableName);
        } else {

            Row row = new Row();
            row.attributes = list;
            if(!table.addRow(row)){
                errorList.add("No se pudo agregar el registro a la tabla");
            }
        }
    
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // attributes ::= attributes lName value rName 
            {
              List<Attribute> RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-3)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-3)).right;
		List<Attribute> at = (List<Attribute>)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-3)).value;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		Attribute attribute = (Attribute)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		RESULT = at; attribute.property.propertyName = propertyName; RESULT.add(attribute);
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("attributes",2, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-3)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // attributes ::= lName value rName 
            {
              List<Attribute> RESULT =null;
		int propertyNameleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).left;
		int propertyNameright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).right;
		String propertyName = (String)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		Attribute attribute = (Attribute)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		RESULT = new List<>(); attribute.property.propertyName = propertyName; RESULT.add(attribute);
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("attributes",2, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // value ::= INT 
            {
              Attribute RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new Attribute(num.getValue(),new Property()); RESULT.property.propertyType = PropertyType.INT;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // value ::= DOUBLE 
            {
              Attribute RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token db = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new Attribute(db.getValue(),new Property()); RESULT.property.propertyType = PropertyType.DOUBLE;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // value ::= CHAR 
            {
              Attribute RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token ch = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new Attribute(ch.getValue(),new Property()); RESULT.property.propertyType = PropertyType.CHAR;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // value ::= BOOLEAN 
            {
              Attribute RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token bool = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new Attribute(bool.getValue(),new Property()); RESULT.property.propertyType = PropertyType.BOOLEAN;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // value ::= string 
            {
              Attribute RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		StringBuilder content = (StringBuilder)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new Attribute(content.toString(),new Property()); RESULT.property.propertyType = PropertyType.STRING;
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("value",3, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // string ::= string NAME 
            {
              StringBuilder RESULT =null;
		int builderleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int builderright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		StringBuilder builder = (StringBuilder)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token content = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = builder; RESULT.append(" ").append(content.getValue());
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("string",5, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // string ::= NAME 
            {
              StringBuilder RESULT =null;
		int contentleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()).right;
		Token content = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.peek()).value;
		RESULT = new StringBuilder(); RESULT.append(content.getValue());
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("string",5, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lName ::= LESS NAME GREATER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-1)).value;
		RESULT = name.getValue();
              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("lName",4, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-2)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rName ::= LESS DIAGONAL NAME GREATER 
            {
              Object RESULT =null;

              CUP$EntradaParser$result = parser.getSymbolFactory().newSymbol("rName",1, ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.elementAt(CUP$EntradaParser$top-3)), ((java_cup.runtime.Symbol)CUP$EntradaParser$stack.peek()), RESULT);
            }
          return CUP$EntradaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EntradaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EntradaParser$do_action(
    int                        CUP$EntradaParser$act_num,
    java_cup.runtime.lr_parser CUP$EntradaParser$parser,
    java.util.Stack            CUP$EntradaParser$stack,
    int                        CUP$EntradaParser$top)
    throws java.lang.Exception
    {
              return CUP$EntradaParser$do_action_part00000000(
                               CUP$EntradaParser$act_num,
                               CUP$EntradaParser$parser,
                               CUP$EntradaParser$stack,
                               CUP$EntradaParser$top);
    }
}

}
