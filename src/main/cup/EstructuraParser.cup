package com.mio.compiler.parser;
/*
java -jar java-cup-11b.jar /home/mio/Escritorio/2023/EDD/proyecto-final-EDD/src/main/cup/EstructuraParser.cup
*/
import com.mio.compiler.Token;
import com.mio.compiler.lexer.EstructuraLexer;
import com.mio.models.abbTree.Tree;
import com.mio.models.list.List;
import com.mio.models.table.Property;
import com.mio.models.table.PropertyType;
import com.mio.models.table.Table;


class EstructuraParser;

parser code{:

    List<String> errorMessages;
    public EstructuraParser(EstructuraLexer lexer, List<String> errorMessages){

        super(lexer);
        this.errorMessages = errorMessages;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;


        if (cur_token.sym == TSParserSym.EOF) {
            errorMessages.add("Simbolo no esperado."));

        } else {
            String tokenVal = token.getValue() == null? EntradaParserSym.terminalNames[token.getType()]: token.getValue();
            errorMessages.add("Simbolo no esperado: "+tokenVal));

        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == TSParserSym.EOF) {
            errorMessages.add("Simbolo no esperado."));
        } else {
            String tokenVal = token.getValue() == null? EntradaParserSym.terminalNames[token.getType()]: token.getValue();
            errorMessages.add("Simbolo no esperado: "+tokenVal));

        }
    }
:}

terminal Token ESTRUCTURA, ESTRUCTURAS, TABLA, LESS, GREATER, CLAVE, NAME, DIAGONAL, PADRE;
terminal Token INT, DOUBLE, BOOLEAN, CHAR, STRING, RELACION;

non terminal main, structs, struct, lTable, rTable;
non terminal lKey, rKey, rName, lStruct, rStruct, lStructs, rStructs, lParent, rParent, lRelation, rRelation;
non terminal List<Property> properties;
non terminal String lName;
non terminal PropertyType type;

start with main;

main
::=	lStructs structs rStructs
	;

structs
::=	structs struct
	| struct
	;

struct
::=	lStruct
    lTable NAME:tableName rTable
    lRelation lName:propertyName type:type rName lName:parentName NAME rName rRelation
    properties:list
    lKey NAME:keyName rKey
    rStruct
    {:
        Property foreignProperty = new Property(propertyName, type);
        Table parent = Tree.getInstance().getByName(parentName);
        if ( parent == null ) {
            errorMessages.add("No se encontró la entidad: "+parentName);

        } else {

            Property parentProperty = parent.properties.find(foreignProperty);
            if ( parentProperty == null ) {
                errorMessages.add("No se encontró la propiedad en la entidad padre: "+propertyName);
            } else {

                if(foreignProperty.propertyType != parentProperty.propertyType) {
                    errorMessages.add("El tipo de la propiedad: "+parentProperty.propertyName+" del padre no coincide con la actual");
                } else {

                    list.add(foreignProperty);
                    if ( list.hasDuplicates() ) {
                        errorMessages.add("Propiedades duplicadas.");
                    } else {

                        Property keyProperty = new Property(keyName.getValue(), null);

                        Property keyInList = list.find(keyProperty);

                        if( keyInList == null ) {
                            errorMessages.add("No se encontró la llave: "+keyName.getValue()+" dentro de las propiedades.");

                        } else {
                            Table newTable = new Table(tableName.getValue(), list, keyName.getValue(), propertyName, parentName);
                            Tree.getInstance().add(newTable);
                            errorMessages.add("Tabla: "+tableName.getValue()+" creada con éxito.");
                        }

                    }
                }
            }
        }
    :}
    | lStruct
      lTable NAME:tableName rTable
      properties:list
      lKey NAME:keyName rKey
      rStruct
    {:
        if ( list.hasDuplicates() ) {
            errorMessages.add("Propiedades duplicadas.");
        } else {

            Property keyProperty = new Property(keyName.getValue(), null);

            Property keyInList = list.find(keyProperty);

            if( keyInList == null ) {
                errorMessages.add("No se encontró la llave: "+keyName.getValue()+" dentro de las propiedades.");

            } else {
                Table newTable = new Table(tableName.getValue(), list, keyName.getValue());
                Tree.getInstance().add(newTable);
                errorMessages.add("Tabla: "+tableName.getValue()+" creada con éxito.");
            }

        }
    :}
	;

properties
::=	properties:list lName:propertyName type:propertyType rName
    {:RESULT = list; RESULT.add(new Property(propertyName,  propertyType));:}
	| lName:propertyName type:propertyType rName
	{:RESULT = new List<>(); RESULT.add(new Property(propertyName, propertyType));:}
	;

type
::= INT                                                   {:RESULT = PropertyType.INT;:}
    | DOUBLE                                                {:RESULT = PropertyType.DOUBLE;:}
    | BOOLEAN                                               {:RESULT = PropertyType.BOOLEAN;:}
    | CHAR                                                  {:RESULT = PropertyType.CHAR;:}
    | STRING                                                {:RESULT = PropertyType.STRING;:}
    ;

lStruct
::= LESS ESTRUCTURA GREATER
    ;

rStruct
::= LESS DIAGONAL ESTRUCTURA GREATER
    ;

lStructs
::= LESS ESTRUCTURAS GREATER
    ;

rStructs
::= LESS DIAGONAL ESTRUCTURAS GREATER
    ;

lName
::= LESS NAME:name GREATER
    {:RESULT = name.getValue();:}
    ;

rName
::= LESS DIAGONAL NAME GREATER
    ;

lKey
::= LESS CLAVE GREATER
    ;

rKey
::= LESS DIAGONAL CLAVE GREATER
    ;

lTable
::= LESS TABLA GREATER
    ;

rTable
::= LESS DIAGONAL TABLA GREATER
    ;

lParent
::= LESS PADRE GREATER
    ;

rParent
::= LESS DIAGONAL PADRE GREATER
    ;

lRelation
::= LESS RELACION GREATER
    ;

rRelation
::= LESS DIAGONAL RELACION GREATER
    ;